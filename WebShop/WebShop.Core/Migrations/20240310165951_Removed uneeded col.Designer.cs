// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebShop.Core.Data;

#nullable disable

namespace WebShop.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240310165951_Removed uneeded col")]
    partial class Removeduneededcol
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebShop.Core.Models.BookShop.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Key identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasComment("Author pseudo-name");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasComment("Author table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "John Smith"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Alice Johnson"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Michael Brown"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Emily Davis"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Robert Miller"
                        });
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.AuthorPromotion", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasComment("Author key identifier");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int")
                        .HasComment("Promotion key identifier");

                    b.HasKey("AuthorId", "PromotionId");

                    b.HasIndex("PromotionId");

                    b.ToTable("AuthorPromotions");

                    b.HasComment("Author targeted promotion");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Key identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasComment("Author key identifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Book's non-promotional price");

                    b.Property<string>("BookCover")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Url for book cover");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Book description");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasComment("Genre key identifier");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int")
                        .HasComment("Total quantity available");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("Book title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasComment("Book table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            BasePrice = 24.99m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1681419689l/62792245.jpg",
                            Description = "A thrilling adventure in an ancient city buried in the jungle.",
                            GenreId = 1,
                            StockQuantity = 300,
                            Title = "The Lost City"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            BasePrice = 19.99m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1686001523l/123416690.jpg",
                            Description = "Hercule Poirot solves a murder mystery on a luxurious train.",
                            GenreId = 2,
                            StockQuantity = 300,
                            Title = "Murder on the Orient Express"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            BasePrice = 14.99m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1684911482l/127280062.jpg",
                            Description = "A classic novel exploring the themes of love and social expectations.",
                            GenreId = 3,
                            StockQuantity = 300,
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            BasePrice = 29.99m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1543687940l/42046112.jpg",
                            Description = "Epic science fiction saga set in a distant future on the desert planet Arrakis.",
                            GenreId = 4,
                            StockQuantity = 300,
                            Title = "Dune"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            BasePrice = 22.99m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1478144278i/2203._SX50_.jpg",
                            Description = "An in-depth exploration of the rise and fall of the Roman Empire.",
                            GenreId = 5,
                            StockQuantity = 300,
                            Title = "The History of Ancient Rome"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 1,
                            BasePrice = 18.99m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1679758198l/122757697.jpg",
                            Description = "A portrayal of the decadence of the Roaring Twenties in America.",
                            GenreId = 1,
                            StockQuantity = 300,
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 2,
                            BasePrice = 16.99m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1687766651l/71872869.jpg",
                            Description = "A powerful story addressing racial injustice in the American South.",
                            GenreId = 2,
                            StockQuantity = 300,
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 4,
                            BasePrice = 27.99m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1696146860l/60531420._SY475_.jpg",
                            Description = "Cyberpunk novel depicting a hacker's quest in a dystopian future.",
                            GenreId = 4,
                            StockQuantity = 300,
                            Title = "Neuromancer"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 3,
                            BasePrice = 26.99m,
                            BookCover = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1657555929i/27323.jpg",
                            Description = "A monumental work chronicling the impact of the Napoleonic Wars.",
                            GenreId = 5,
                            StockQuantity = 300,
                            Title = "War and Peace"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 5,
                            BasePrice = 20.99m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1598823299l/42844155._SY475_.jpg",
                            Description = "A coming-of-age novel capturing the disillusionment of adolescence.",
                            GenreId = 1,
                            StockQuantity = 300,
                            Title = "The Catcher in the Rye"
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 1,
                            BasePrice = 28.50m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1682375874l/123136728.jpg",
                            Description = "A fantasy adventure novel set in the fictional world of Middle-earth.",
                            GenreId = 1,
                            StockQuantity = 300,
                            Title = "The Hobbit"
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 2,
                            BasePrice = 23.75m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1672016255l/65213197.jpg",
                            Description = "A gripping mystery involving a journalist and a hacker.",
                            GenreId = 2,
                            StockQuantity = 300,
                            Title = "The Girl with the Dragon Tattoo"
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = 3,
                            BasePrice = 17.25m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1684816198l/75665914.jpg",
                            Description = "Jane Austen's novel exploring the challenges of love and societal expectations.",
                            GenreId = 3,
                            StockQuantity = 300,
                            Title = "Sense and Sensibility"
                        },
                        new
                        {
                            Id = 14,
                            AuthorId = 4,
                            BasePrice = 31.20m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1686092541l/62919162._SY475_.jpg",
                            Description = "A space exploration odyssey that delves into the mysteries of the cosmos.",
                            GenreId = 4,
                            StockQuantity = 300,
                            Title = "2001: A Space Odyssey"
                        },
                        new
                        {
                            Id = 15,
                            AuthorId = 5,
                            BasePrice = 19.80m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1676201263i/2199._SY75_.jpg",
                            Description = "An ancient Chinese treatise on military strategy and tactics.",
                            GenreId = 5,
                            StockQuantity = 300,
                            Title = "The Art of War"
                        },
                        new
                        {
                            Id = 16,
                            AuthorId = 1,
                            BasePrice = 24.90m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1680211580l/65213204._SY475_.jpg",
                            Description = "A dystopian novel depicting a futuristic world with advanced technology.",
                            GenreId = 1,
                            StockQuantity = 300,
                            Title = "Brave New World"
                        },
                        new
                        {
                            Id = 17,
                            AuthorId = 2,
                            BasePrice = 21.30m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1680363772l/124935364.jpg",
                            Description = "A classic novel portraying the struggles of a family during the Great Depression.",
                            GenreId = 2,
                            StockQuantity = 300,
                            Title = "The Grapes of Wrath"
                        },
                        new
                        {
                            Id = 18,
                            AuthorId = 4,
                            BasePrice = 29.45m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1678479483l/62923490.jpg",
                            Description = "A science fiction novel exploring the virtual and real worlds.",
                            GenreId = 4,
                            StockQuantity = 300,
                            Title = "Snow Crash"
                        },
                        new
                        {
                            Id = 19,
                            AuthorId = 3,
                            BasePrice = 27.60m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1617037342i/40779082._SY75_.jpg",
                            Description = "Victor Hugo's epic novel following the lives of several characters in post-revolutionary France.",
                            GenreId = 5,
                            StockQuantity = 300,
                            Title = "Les Misérables"
                        },
                        new
                        {
                            Id = 20,
                            AuthorId = 5,
                            BasePrice = 30.75m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1675867491l/101161005.jpg",
                            Description = "A trilogy narrating the journey to destroy the One Ring and save Middle-earth.",
                            GenreId = 1,
                            StockQuantity = 300,
                            Title = "The Lord of the Rings"
                        },
                        new
                        {
                            Id = 21,
                            AuthorId = 1,
                            BasePrice = 26.85m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1664729357l/62848145._SY475_.jpg",
                            Description = "A psychological horror novel set in an isolated, haunted hotel.",
                            GenreId = 2,
                            StockQuantity = 300,
                            Title = "The Shining"
                        },
                        new
                        {
                            Id = 22,
                            AuthorId = 3,
                            BasePrice = 18.55m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1685353278l/123199658.jpg",
                            Description = "Jane Austen's novel portraying the humorous adventures of a young woman.",
                            GenreId = 3,
                            StockQuantity = 300,
                            Title = "Emma"
                        },
                        new
                        {
                            Id = 23,
                            AuthorId = 4,
                            BasePrice = 32.10m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1677109121l/75260734._SY475_.jpg",
                            Description = "The first book in Isaac Asimov's Foundation series, exploring the collapse of a galactic empire.",
                            GenreId = 4,
                            StockQuantity = 300,
                            Title = "Foundation"
                        },
                        new
                        {
                            Id = 24,
                            AuthorId = 5,
                            BasePrice = 20.15m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1617037342i/40779082._SY75_.jpg",
                            Description = "A political treatise by Niccolò Machiavelli on leadership and power.",
                            GenreId = 5,
                            StockQuantity = 300,
                            Title = "The Prince"
                        },
                        new
                        {
                            Id = 25,
                            AuthorId = 2,
                            BasePrice = 22.40m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1691467586l/157560224._SY475_.jpg",
                            Description = "Charles Dickens' novel following the life and education of an orphan.",
                            GenreId = 1,
                            StockQuantity = 300,
                            Title = "The Great Expectations"
                        },
                        new
                        {
                            Id = 26,
                            AuthorId = 2,
                            BasePrice = 25.15m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1668782119l/40097951._SY475_.jpg",
                            Description = "A dystopian novel depicting a totalitarian society and the consequences of thought control.",
                            GenreId = 2,
                            StockQuantity = 300,
                            Title = "1984"
                        },
                        new
                        {
                            Id = 27,
                            AuthorId = 3,
                            BasePrice = 16.70m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1677050625l/75293479.jpg",
                            Description = "Nathaniel Hawthorne's novel exploring themes of sin and redemption.",
                            GenreId = 3,
                            StockQuantity = 300,
                            Title = "The Scarlet Letter"
                        },
                        new
                        {
                            Id = 28,
                            AuthorId = 4,
                            BasePrice = 28.30m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1589475583l/53205854._SY475_.jpg",
                            Description = "A cyberpunk novel where consciousness can be transferred between bodies.",
                            GenreId = 4,
                            StockQuantity = 300,
                            Title = "Altered Carbon"
                        },
                        new
                        {
                            Id = 29,
                            AuthorId = 1,
                            BasePrice = 24.65m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1327861115i/8664353._SY75_.jpg",
                            Description = "An ancient Greek epic poem attributed to Homer, chronicling the adventures of Odysseus.",
                            GenreId = 5,
                            StockQuantity = 300,
                            Title = "The Odyssey"
                        },
                        new
                        {
                            Id = 30,
                            AuthorId = 5,
                            BasePrice = 19.35m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1680590876l/124944200.jpg",
                            Description = "Mark Twain's novel following Huck's journey down the Mississippi River.",
                            GenreId = 1,
                            StockQuantity = 300,
                            Title = "The Adventures of Huckleberry Finn"
                        },
                        new
                        {
                            Id = 31,
                            AuthorId = 1,
                            BasePrice = 26.25m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1545494980l/40916679._SY475_.jpg",
                            Description = "Gabriel García Márquez's magical realist novel spanning seven generations.",
                            GenreId = 2,
                            StockQuantity = 300,
                            Title = "One Hundred Years of Solitude"
                        },
                        new
                        {
                            Id = 32,
                            AuthorId = 3,
                            BasePrice = 21.95m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1681790985l/123239368.jpg",
                            Description = "Emily Brontë's novel depicting the passionate and destructive love between Heathcliff and Catherine.",
                            GenreId = 3,
                            StockQuantity = 300,
                            Title = "Wuthering Heights"
                        },
                        new
                        {
                            Id = 33,
                            AuthorId = 4,
                            BasePrice = 29.80m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1600789291l/40864002._SY475_.jpg",
                            Description = "A comedic science fiction series following the misadventures of Arthur Dent.",
                            GenreId = 4,
                            StockQuantity = 300,
                            Title = "The Hitchhikers Guide to the Galaxy"
                        },
                        new
                        {
                            Id = 34,
                            AuthorId = 5,
                            BasePrice = 27.15m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1388185755i/35100._SY75_.jpg",
                            Description = "A series of personal writings by Roman Emperor Marcus Aurelius.",
                            GenreId = 5,
                            StockQuantity = 300,
                            Title = "Meditations"
                        },
                        new
                        {
                            Id = 35,
                            AuthorId = 2,
                            BasePrice = 30.40m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1685350627l/123280215.jpg",
                            Description = "Charles Dickens' historical novel set in London and Paris before and during the French Revolution.",
                            GenreId = 1,
                            StockQuantity = 300,
                            Title = "A Tale of Two Cities"
                        },
                        new
                        {
                            Id = 36,
                            AuthorId = 2,
                            BasePrice = 23.50m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1642696843l/60168787._SY475_.jpg",
                            Description = "A post-apocalyptic novel following a father and son's journey through a desolate landscape.",
                            GenreId = 2,
                            StockQuantity = 300,
                            Title = "The Road"
                        },
                        new
                        {
                            Id = 37,
                            AuthorId = 3,
                            BasePrice = 18.75m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1678532327l/123211121.jpg",
                            Description = "Leo Tolstoy's novel exploring themes of love, infidelity, and societal expectations.",
                            GenreId = 3,
                            StockQuantity = 300,
                            Title = "Anna Karenina"
                        },
                        new
                        {
                            Id = 38,
                            AuthorId = 4,
                            BasePrice = 32.00m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1626710416l/58446227.jpg",
                            Description = "A science fiction novel depicting an astronaut's struggle for survival on Mars.",
                            GenreId = 4,
                            StockQuantity = 300,
                            Title = "The Martian"
                        },
                        new
                        {
                            Id = 39,
                            AuthorId = 1,
                            BasePrice = 20.60m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1435759367i/19400._SY75_.jpg",
                            Description = "Fyodor Dostoevsky's psychological novel exploring guilt and redemption.",
                            GenreId = 5,
                            StockQuantity = 300,
                            Title = "Crime and Punishment"
                        },
                        new
                        {
                            Id = 40,
                            AuthorId = 5,
                            BasePrice = 22.90m,
                            BookCover = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1685351764l/123505439.jpg",
                            Description = "Oscar Wilde's novel exploring the consequences of a man's pursuit of eternal youth and beauty.",
                            GenreId = 1,
                            StockQuantity = 300,
                            Title = "The Picture of Dorian Gray"
                        });
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Key identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("IconLink")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Icon to display the category");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasComment("Genre name");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasComment("Genre table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IconLink = "https://cdn.iconscout.com/icon/premium/png-256-thumb/fantasy-1709964-1452291.png",
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            IconLink = "https://storage.cloud.google.com/book-shop-web-proj/mystery-icon.png",
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 3,
                            IconLink = "https://storage.cloud.google.com/book-shop-web-proj/romance-icon.png",
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 4,
                            IconLink = "https://cdn3.iconfinder.com/data/icons/movie-genres-1/500/movie-category-genres-categories_11-512.png",
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 5,
                            IconLink = "https://storage.cloud.google.com/book-shop-web-proj/history-icon-v2.png",
                            Name = "History"
                        });
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.GenrePromotion", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasComment("Genre key identifier");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int")
                        .HasComment("Promotion key identifier");

                    b.HasKey("GenreId", "PromotionId");

                    b.HasIndex("PromotionId");

                    b.ToTable("GenrePromotions");

                    b.HasComment("Promotion targeting genres");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.PlacedOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Key identifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Address of delivery.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("City of delivery.");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Country of delivery.");

                    b.Property<DateTime?>("DateFulfilled")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the order fulfillment");

                    b.Property<DateTime>("DatePlaced")
                        .HasColumnType("datetime2")
                        .HasComment("Date of order");

                    b.Property<bool>("IsShipped")
                        .HasColumnType("bit")
                        .HasComment("Indication of order stage");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identity user id");

                    b.HasKey("Id");

                    b.ToTable("PlacedOrders");

                    b.HasComment("Placed order");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.PlacedOrderBook", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasComment("Book Identifier");

                    b.Property<Guid>("PlacedOrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Order Identifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of books ordered");

                    b.Property<decimal>("SingleItemPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Purchase price for single book");

                    b.HasKey("BookId", "PlacedOrderId");

                    b.HasIndex("PlacedOrderId");

                    b.ToTable("PlacedOrderBooks");

                    b.HasComment("Collection of all books that are ordered");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Id identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("DiscountPercent")
                        .HasColumnType("float")
                        .HasComment("Discount percent");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("End of promotion date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Promotion Name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Start of promotion date");

                    b.HasKey("Id");

                    b.ToTable("Promotions");

                    b.HasComment("Promotion table");
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("User first name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Identifier if the user account is deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("User last name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.AuthorPromotion", b =>
                {
                    b.HasOne("WebShop.Core.Models.BookShop.Author", "Author")
                        .WithMany("AuthorPromotions")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebShop.Core.Models.BookShop.Promotion", "Promotion")
                        .WithMany("AuthorPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.Book", b =>
                {
                    b.HasOne("WebShop.Core.Models.BookShop.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebShop.Core.Models.BookShop.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.GenrePromotion", b =>
                {
                    b.HasOne("WebShop.Core.Models.BookShop.Genre", "Genre")
                        .WithMany("GenrePromotions")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebShop.Core.Models.BookShop.Promotion", "Promotion")
                        .WithMany("GenrePromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.PlacedOrderBook", b =>
                {
                    b.HasOne("WebShop.Core.Models.BookShop.Book", "Book")
                        .WithMany("PlacedOrderBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebShop.Core.Models.BookShop.PlacedOrder", "PlacedOrder")
                        .WithMany("PlacedOrderBooks")
                        .HasForeignKey("PlacedOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("PlacedOrder");
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("WebShop.Core.Models.Identity.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("WebShop.Core.Models.Identity.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("WebShop.Core.Models.Identity.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("WebShop.Core.Models.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebShop.Core.Models.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("WebShop.Core.Models.Identity.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.Author", b =>
                {
                    b.Navigation("AuthorPromotions");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.Book", b =>
                {
                    b.Navigation("PlacedOrderBooks");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.Genre", b =>
                {
                    b.Navigation("GenrePromotions");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.PlacedOrder", b =>
                {
                    b.Navigation("PlacedOrderBooks");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.Promotion", b =>
                {
                    b.Navigation("AuthorPromotions");

                    b.Navigation("GenrePromotions");
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
