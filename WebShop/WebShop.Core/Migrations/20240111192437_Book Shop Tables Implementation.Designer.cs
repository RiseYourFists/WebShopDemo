// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebShop.Core.Data;

#nullable disable

namespace WebShop.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240111192437_Book Shop Tables Implementation")]
    partial class BookShopTablesImplementation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebShop.Core.Models.BookShop.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Key identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasComment("Author pseudo-name");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasComment("Author table");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.AuthorPromotion", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasComment("Author key identifier");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int")
                        .HasComment("Promotion key identifier");

                    b.HasKey("AuthorId", "PromotionId");

                    b.HasIndex("PromotionId");

                    b.ToTable("AuthorPromotions");

                    b.HasComment("Author targeted promotion");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Key identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasComment("Author key identifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Book's non-promotional price");

                    b.Property<string>("CoverPhoto")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Book's cover photo");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Book's price with or without promotion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Book description");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasComment("Genre key identifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("Book title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasComment("Book table");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Key identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasComment("Genre name");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasComment("Genre table");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.GenrePromotion", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasComment("Genre key identifier");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int")
                        .HasComment("Promotion key identifier");

                    b.HasKey("GenreId", "PromotionId");

                    b.HasIndex("PromotionId");

                    b.ToTable("GenrePromotions");

                    b.HasComment("Promotion targeting genres");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.PlacedOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Key identifier");

                    b.Property<DateTime?>("DateFulfilled")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the order fulfillment");

                    b.Property<DateTime>("DatePlaced")
                        .HasColumnType("datetime2")
                        .HasComment("Date of order");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total price for the order");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identity user id");

                    b.HasKey("Id");

                    b.ToTable("PlacedOrders");

                    b.HasComment("Placed order");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.PlacedOrderBook", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasComment("Book Identifier");

                    b.Property<Guid>("PlacedOrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Order Identifier");

                    b.HasKey("BookId", "PlacedOrderId");

                    b.HasIndex("PlacedOrderId");

                    b.ToTable("PlacedOrderBooks");

                    b.HasComment("Collection of all books that are ordered");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Id identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("DiscountPercent")
                        .HasColumnType("float")
                        .HasComment("Discount percent");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("End of promotion date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Promotion Name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Start of promotion date");

                    b.HasKey("Id");

                    b.ToTable("Promotions");

                    b.HasComment("Promotion table");
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("User first name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Identifier if the user account is deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("User last name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.AuthorPromotion", b =>
                {
                    b.HasOne("WebShop.Core.Models.BookShop.Author", "Author")
                        .WithMany("AuthorPromotions")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebShop.Core.Models.BookShop.Promotion", "Promotion")
                        .WithMany("AuthorPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.Book", b =>
                {
                    b.HasOne("WebShop.Core.Models.BookShop.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebShop.Core.Models.BookShop.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.GenrePromotion", b =>
                {
                    b.HasOne("WebShop.Core.Models.BookShop.Genre", "Genre")
                        .WithMany("GenrePromotions")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebShop.Core.Models.BookShop.Promotion", "Promotion")
                        .WithMany("GenrePromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.PlacedOrderBook", b =>
                {
                    b.HasOne("WebShop.Core.Models.BookShop.Book", "Book")
                        .WithMany("PlacedOrderBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebShop.Core.Models.BookShop.PlacedOrder", "PlacedOrder")
                        .WithMany("PlacedOrderBooks")
                        .HasForeignKey("PlacedOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("PlacedOrder");
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("WebShop.Core.Models.Identity.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("WebShop.Core.Models.Identity.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("WebShop.Core.Models.Identity.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("WebShop.Core.Models.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebShop.Core.Models.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("WebShop.Core.Models.Identity.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.Author", b =>
                {
                    b.Navigation("AuthorPromotions");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.Book", b =>
                {
                    b.Navigation("PlacedOrderBooks");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.Genre", b =>
                {
                    b.Navigation("GenrePromotions");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.PlacedOrder", b =>
                {
                    b.Navigation("PlacedOrderBooks");
                });

            modelBuilder.Entity("WebShop.Core.Models.BookShop.Promotion", b =>
                {
                    b.Navigation("AuthorPromotions");

                    b.Navigation("GenrePromotions");
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("WebShop.Core.Models.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
